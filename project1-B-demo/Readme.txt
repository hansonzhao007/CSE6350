# update

1. Index part now only stores the `offset` of kv items in the log.
2. Adding an `EncodeKV` function to wrap the key-value pairs as kv items in the log, so we can decode them later


# How to run the demo code

## Compile the source code

Run command  `make` in current folder, two executable file will be generated, `generator` and `kvstore` .

`generator`: This is used to generate input file (like input.txt) for `kvstore`. 
usage:
    ./generator -n 1000 -o input.txt -p 100 -g 20 -d 0
    This will generate 1000 put records, and 20% get request(1000*20% = 200) and 0 del request, saved as file `input.txt`

`kvstore`: This is the key value store demo.
    usage: ./kvstore -i input.txt -o output.txt
    You can change the input file by change the filename.

`input_put.txt`: This file contains 1000000 put requests. (only put. Generated by `./generator -n 1000000 -o input_put.txt -p 100 -g 0 -d 0`)

`input_get.txt`: This file contains 1000000 get requests. (only get, Generated by `./generator -n 1000000 -o input_get.txt -p 0 -g 100 -d 0`)

## Run key value store

1. run `./kvstore -i input_put.txt -o input_put_output.txt`

After the program finishes, two files that store the index and data will be generated.

`kvstore.data.index`: This file contains the dram index of the kv store. The dram index will be restored after rebooting.

`kvstore.data.datalog`: This file contains the value. 

2. run `./kvstore -i input_get.txt -o input_get_output.txt` to reboot the kv store and read some data. You will see following results in the output file (input_get_output.txt).

type,key1,outcome,values
get,key0000000551206,1,value00000551206
get,key0000000484961,1,value00000484961
get,key0000000855746,1,value00000855746
get,key0000000392632,1,value00000392632
get,key0000000883233,1,value00000883233
get,key0000000375923,1,value00000375923
